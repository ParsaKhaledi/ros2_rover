services:
  Lidar:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: lidar
    hostname: lidar
    tty: true
    privileged: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/home/rover/ws_rover/HealthCheck/check_multi_topic_pub.bash", "1",
             "/scan"]      
      interval:     10s
      timeout:      5s
      retries:      3
      start_period: 5s
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # network_mode: "host"
    networks:
      rover:
        ipv4_address: "10.20.10.2"

    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DISPLAY=${DISPLAY}
      - XAUTHORITY=${XAUTH}

        
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /dev:/dev/
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./HealthCheck/:/home/rover/ws_rover/HealthCheck/
      - ./ws_rover:/home/rover/ws_rover

    # command: /bin/bash -c "sleep inf"
    # entrypoint: ["/bin/sh", "-c"]
    
      # With RVIZ
    # command: /bin/bash -c "
    #   source /home/rover/ws_rover/install/setup.bash && ros2 launch sllidar_ros2 view_sllidar_c1_launch.py "
    #  ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link laser"
      # No Rviz
    command: /bin/bash -c "
       source /home/rover/ws_rover/install/setup.bash && ros2 launch sllidar_ros2 sllidar_c1_launch.py "
      # ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link laser &\
      # ros2 run rtabmap_odom icp_odometry  "

  StaticTransform:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: st
    hostname: st
    tty: true
    privileged: true
    depends_on:
      Lidar:
        condition: service_healthy
    restart: unless-stopped
    # runtime: nvidia
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    # network_mode: "host"
    networks:
      rover:
        ipv4_address: "10.20.10.4"

    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DISPLAY=${DISPLAY}
      - XAUTHORITY=${XAUTH}

        
    volumes:
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./HealthCheck/:/home/rover/ws_rover/HealthCheck/
      - ./ws_rover:/home/rover/ws_rover

    # command: /bin/bash -c "sleep inf"
    # entrypoint: ["/bin/sh", "-c"]

    command: /bin/bash -c "
      source /opt/ros/humble/setup.bash && \
      ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link laser "
      # & ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link oak-d-base-frame "

  Rtabmap:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: rtabmap
    hostname: rtabmap
    tty: true
    privileged: true
    restart: unless-stopped
    depends_on:
      - StaticTransform
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # network_mode: "host"
    healthcheck:
      test: ["CMD", "/home/rover/ws_rover/HealthCheck/check_multi_topic_pub.bash", "1",
             "/icp_odom"]      
      interval:     5s
      timeout:      5s
      retries:      10
      start_period: 7s
    networks:
      rover:
        ipv4_address: "10.20.10.5"

    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DISPLAY=${DISPLAY}
      - XAUTHORITY=${XAUTH}

        
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      # - /dev:/dev/
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./HealthCheck/:/home/rover/ws_rover/HealthCheck/
      - ./launchFiles:/home/rover/ws_rover/volume/launchFiles
      - ./ws_rover:/home/rover/ws_rover


  #   command: /bin/bash -c "sleep inf"
  #   # entrypoint: ["/bin/sh", "-c"]

    command: /bin/bash -c "
      source /home/rover/ws_rover/install/setup.bash && \
      ros2 launch /home/rover/ws_rover/volume/launchFiles/jetson_rtabmap_icp_lidar.launch.py "

  Nav2:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: nav2
    hostname: nav2
    tty: true
    privileged: true
    restart: unless-stopped
    depends_on:
      Lidar:
        condition: service_healthy
      StaticTransform:
        condition: service_started
      Rtabmap:
        condition: service_healthy
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # network_mode: "host"
    networks:
      rover:
        ipv4_address: "10.20.10.6"

    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - DISPLAY=${DISPLAY}
      - XAUTHORITY=${XAUTH}
        
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./HealthCheck/:/home/rover/ws_rover/HealthCheck/
      - ./launchFiles:/home/rover/ws_rover/volume/launchFiles
      - ./ws_rover:/home/rover/ws_rover

   # entrypoint: ["/bin/sh", "-c"]
   # command: /bin/bash -c "sleep inf"

    command: /bin/bash -c "
      source /home/rover/ws_rover/install/setup.bash && \
      ros2 launch nav2_bringup navigation_launch.py params_file:=/home/rover/ws_rover/volume/launchFiles/nav2_lidar.yaml  "

  Nav2_rviz:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: nav2_rviz
    hostname: nav2_rivz
    tty: true
    privileged: true
    restart: unless-stopped
    depends_on:
      - Nav2
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # network_mode: "host"
    networks:
      rover:
        ipv4_address: "10.20.10.7"

    environment:
    - NVIDIA_VISIBLE_DEVICES=all
    - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    - DISPLAY=${DISPLAY}
    - XAUTHORITY=${XAUTH}
        
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./:/home/rover/ws_rover/volume/
      - ./ws_rover:/home/rover/ws_rover

    # command: /bin/bash -c "sleep inf"
    # entrypoint: ["/bin/sh", "-c"]

    command: /bin/bash -c "
      source /home/rover/ws_rover/install/setup.bash && \
      ros2 launch nav2_bringup rviz_launch.py "

  ArduinoCMD:
    image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
    container_name: aduinocmd
    hostname: aduinocmd
    tty: true
    privileged: true
    restart: unless-stopped
    depends_on:
      Nav2:
        condition: service_started
    # network_mode: "host"
    networks:
      rover:
        ipv4_address: "10.20.10.8"

    environment:
      DISPLAY: ${DISPLAY}
      XAUTHORITY: ${XAUTH}
        
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
      - ./HealthCheck/:/home/rover/ws_rover/HealthCheck/
      - ./launchFiles:/home/rover/ws_rover/volume/launchFile

    # command: /bin/bash -c "sleep inf"
    # entrypoint: ["/bin/sh", "-c"]

    command: /bin/bash -c "
      python3  /home/rover/ws_rover/volume/launchFile/arduino-cmd-vel.py" 
    
  
  # Rtabmap_backend:
  #   image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
  #   container_name: rtabmap
  #   hostname: rtabmap
  #   tty: true
  #   privileged: true
  #   restart: unless-stopped
  #   runtime: nvidia
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   # network_mode: "host"
  #   # networks:
  #   #   rover:
  #   #     ipv4_address: "10.20.10.8"

    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    #   - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    #   - DISPLAY=${DISPLAY}
    #   - XAUTHORITY=${XAUTH}

        
  #   volumes:
  #     - /tmp/.X11-unix/:/tmp/.X11-unix/
  #     - /dev:/dev/
  #     - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
  #     - ./:/home/${USER_NAME}/ws_rover/volume/

  #   # command: /bin/bash -c "sleep inf"
  #   # entrypoint: ["/bin/sh", "-c"]

  #   command: /bin/bash -c "
  #     ros2 run rtabmap_odom icp_odometry "


  # rviz2:
  #   image: "${registery_GPU}/ros2_rover:${ros2_rover_GPU_tag:?error}"
  #   container_name: rviz2
  #   hostname: rviz2
  #   tty: true
  #   # network_mode: "host"
  #   networks:
  #     rover:
  #       ipv4_address: "10.20.10.10"
  #   # restart: unless-stopped
  #   runtime: nvidia
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   depends_on:
  #     - Lidar
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all
    #   - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    #   - DISPLAY=${DISPLAY}
    #   - XAUTHORITY=${XAUTH}
  #   volumes:
  #     - /tmp/.X11-unix/:/tmp/.X11-unix/
  #   command: /bin/bash -c "
        # source /opt/ros/humble/setup.bash && \
  #     source /home/rover/ws_rover/install/setup.bash && rviz2 -d "



networks:
  rover:
    ipam:
      driver: default
      config:
        - subnet: "10.20.10.0/24"


# curl -I -X GET http://172.0.0.200:5000/v2/nvidia/l4t-jetpack/manifests/r36.4.0
# curl -X DELETE http://172.0.0.200:5000/v2/nvidia/l4t-jetpack/manifests/sha256:34ccf0f3b63c6da9eee45f2e79de9bf7fdf3beda9abfd72bbf285ae9d40bb673
# curl -X GET http://172.0.0.200:5000/v2/nvidia/l4t-jetpack/tags/list
